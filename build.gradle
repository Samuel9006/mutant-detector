plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'com.meli'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation("org.springdoc:springdoc-openapi-ui:1.6.5")
    implementation("org.springdoc:springdoc-openapi-webmvc-core:1.6.5")
    runtimeOnly  group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation ('org.springframework.boot:spring-boot-starter-test'){
        exclude(group: 'org.junit.vintage', module : 'junit-vintage-engine')
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'junit:junit:4.13.2'

}

tasks.named('test') {
    useJUnitPlatform()
}

def coverageExclusions = [
        '**/dto/*',
        '**/entity/*'
]

test{
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport{
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect{
            fileTree(dir: it, excludes: coverageExclusions)
        }))
    }
}

jacocoTestCoverageVerification{
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect{
            fileTree(dir: it, excludes: coverageExclusions)
        }))
    }
    violationRules{
        rule{
            enabled = true
            limit{
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

